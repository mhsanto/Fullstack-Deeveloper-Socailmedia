// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  name             String
  username         String     @unique
  email            String     @unique
  password         String?
  bio              String?
  picture          String
  location         String?
  portfolioWebsite String?
  reputation       Int        @default(0)
  saved            Question[] @relation("UserToQuestion")
  joinedAt         DateTime   @default(now())
  upVotes          Upvote[]   @relation("UpvoteToUser")
  downVotes        DownVote[] @relation("DownvoteToUser")
}

model Question {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String     @db.ObjectId
  author    User       @relation("UserToQuestion", fields: [authorId], references: [id])
  title     String
  content   String
  upVotes   Upvote[]   @relation("UpvoteToQuestion")
  downVotes DownVote[] @relation("DownvoteToQuestion")
  createdAt DateTime   @default(now())
  tagId     String[]   @db.ObjectId
  Tags      Tag[]      @relation(fields: [tagId], references: [id])
  views     Int        @default(0)
}

model DownVote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  questions  Question @relation("DownvoteToQuestion", fields: [questionId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation("DownvoteToUser", fields: [userId], references: [id])
}

model Upvote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  questions  Question @relation("UpvoteToQuestion", fields: [questionId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation("UpvoteToUser", fields: [userId], references: [id])
}

model Tag {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  questionId String[]   @db.ObjectId
  questions  Question[] @relation(fields: [questionId], references: [id])
  name       String
}
